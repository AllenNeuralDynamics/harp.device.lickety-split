.program ads7029
.side_set 1 ; dedicate one side-set pin for SCK.

; Note: autopush must be enabled with the bit resolution value.

.wrap_target
setup:
    out pins, 0 [1]     ; CS LOW +1 clock cycle delay
    nop, side_set 1 [1] ; SCK HIGH +1 clock cycle delay
    nop, side_set 0 [1] ; SCK LOW +1 clock cycle delay
    nop, side_set 1 [1] ; SCK HIGH +1 clock cycle delay
    nop, side_set 0     ; SCK LOW
    set x, y            ; Setup number of bits to transfer.
data_transfer:
    nop, side_set 1 [1]
    in pins, 1, side_set 0  ; left shift in POCI pin.
    jmp x--, data_transfer  ;
cleanup:    ; autopush should transfer data.
    out pins, 1 ; CS HIGH + 1 clock cycle delay
    nop [16]    ; nop to put us on a 2MHz schedule.
    nop [16]
.wrap

;; TODO: .program ads7039 and ads7049

.program ads7039
.wrap_target
.wrap

.program ads7049
.wrap_target
.wrap

% c-sdk {
#include "hardware/gpio.h"
static inline void setup_pio_ads70x9(PIO pio, uint sm, uint program_offset,
                                     uint data_bits, uint cs_pin, uint sck_pin,
                                     uint poci_pin)
{
    // Determine which program to run based on n_bits.
    pio_sm_config c =
        (n_bits == 8) ?  ads7029_program_get_default_config(program_offset) :
        (n_bits == 10) ? ads7039_program_get_default_config(program_offset) :
                         ads7049_program_get_default_config(program_offset);
    sm_config_set_out_pins(&c, cs_pin, 1);
    sm_config_set_in_pins(&c, poci_pin);
    sm_config_set_sideset_pins(&c, sck_pin);
    // Setup for MSb-first (shift left), enable auto push, autopush threshold = nbits)
    sm_config_set_in_shift(&c, false, true, n_bits);
    sm_config_set_clkdiv(&c, 1.0f); // No clock division.

    // Set output pin starting states.
    pio_sm_set_pins_with_mask(pio, sm,
        (1u << cs_pin) | (0u << sck_pin), // starting values
        (1u << cs_pin) | (1u << sck_pin)); // pin mask.
    // Set pin directions (1 = output; 0 = input)
    pio_sm_set_pindirs_with_mask(pio, sm,
        (1u << cs_pin) | (1u << sck_pin) | (0u << poci_pin),
        (1u << cs_pin) | (1u << sck_pin) | (1u << poci_pin)
    );
    pio_gpio_init(pio, sck_pin);
    pio_gpio_init(pio, poci_pin);
    pio_gpio_init(pio, cs_pin);

    // SPI is synchronous, so bypass input synchroniser to reduce input delay.
    hw_set_bits(&pio->input_sync_bypass, 1u << poci_pin);

    pio_sm_init(pio, sm, program_offset, &c);
}

static inline void pio_ads70x9_start()
{
    // Start state machine.
    pio_sm_set_enabled(pio, sm, true);
}
%}
